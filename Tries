#TRIES
classTNode:
	def __init__(self,elem):
		self.elem=elem
		self.children={}
		self.isEnd=False
	
class Trie:
	def __init__(self):
		self.root=TNode("&") #End of Trie

	def add(self, word):
		curr_node=self.root
		for elem in word:
			if elem not in curr_node.children:
				curr_node.children[elem]=TNode[elem]
			curr_node=curr_node.children[elem]
		curr_node.isEnd=True

	def exist(self,word):
		if word=="&":
			return True
		curr_node=self.root
		for elem in word:
			if elem not in curr_node.children:
				return False
			curr_node=curr_node.children[elem]
		return curr_node.isEnd

